// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: voicedock/core/sp/v1/sp_api.proto

package spv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SpAPI_ProcessSound_FullMethodName = "/voicedock.core.sp.v1.SpAPI/ProcessSound"
)

// SpAPIClient is the client API for SpAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpAPIClient interface {
	// Processes sound.
	ProcessSound(ctx context.Context, opts ...grpc.CallOption) (SpAPI_ProcessSoundClient, error)
}

type spAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSpAPIClient(cc grpc.ClientConnInterface) SpAPIClient {
	return &spAPIClient{cc}
}

func (c *spAPIClient) ProcessSound(ctx context.Context, opts ...grpc.CallOption) (SpAPI_ProcessSoundClient, error) {
	stream, err := c.cc.NewStream(ctx, &SpAPI_ServiceDesc.Streams[0], SpAPI_ProcessSound_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &spAPIProcessSoundClient{stream}
	return x, nil
}

type SpAPI_ProcessSoundClient interface {
	Send(*ProcessSoundRequest) error
	Recv() (*ProcessSoundResponse, error)
	grpc.ClientStream
}

type spAPIProcessSoundClient struct {
	grpc.ClientStream
}

func (x *spAPIProcessSoundClient) Send(m *ProcessSoundRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *spAPIProcessSoundClient) Recv() (*ProcessSoundResponse, error) {
	m := new(ProcessSoundResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SpAPIServer is the server API for SpAPI service.
// All implementations must embed UnimplementedSpAPIServer
// for forward compatibility
type SpAPIServer interface {
	// Processes sound.
	ProcessSound(SpAPI_ProcessSoundServer) error
	mustEmbedUnimplementedSpAPIServer()
}

// UnimplementedSpAPIServer must be embedded to have forward compatible implementations.
type UnimplementedSpAPIServer struct {
}

func (UnimplementedSpAPIServer) ProcessSound(SpAPI_ProcessSoundServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessSound not implemented")
}
func (UnimplementedSpAPIServer) mustEmbedUnimplementedSpAPIServer() {}

// UnsafeSpAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpAPIServer will
// result in compilation errors.
type UnsafeSpAPIServer interface {
	mustEmbedUnimplementedSpAPIServer()
}

func RegisterSpAPIServer(s grpc.ServiceRegistrar, srv SpAPIServer) {
	s.RegisterService(&SpAPI_ServiceDesc, srv)
}

func _SpAPI_ProcessSound_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SpAPIServer).ProcessSound(&spAPIProcessSoundServer{stream})
}

type SpAPI_ProcessSoundServer interface {
	Send(*ProcessSoundResponse) error
	Recv() (*ProcessSoundRequest, error)
	grpc.ServerStream
}

type spAPIProcessSoundServer struct {
	grpc.ServerStream
}

func (x *spAPIProcessSoundServer) Send(m *ProcessSoundResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *spAPIProcessSoundServer) Recv() (*ProcessSoundRequest, error) {
	m := new(ProcessSoundRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SpAPI_ServiceDesc is the grpc.ServiceDesc for SpAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "voicedock.core.sp.v1.SpAPI",
	HandlerType: (*SpAPIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessSound",
			Handler:       _SpAPI_ProcessSound_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "voicedock/core/sp/v1/sp_api.proto",
}
